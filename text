import React, { useState, useRef, useEffect } from 'react';
import { Text, View, TextInput, TouchableOpacity, FlatList, ScrollView,StyleSheet  } from 'react-native';
import axios from 'axios';
import { Buffer } from 'buffer';
import { Audio } from 'expo-av';
import { Image } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { Feather } from '@expo/vector-icons';
global.Buffer = Buffer;

const CLIENT_ID = '2cda8b32630d4194b20ca0c5063e1f1c';
const CLIENT_SECRET = 'b2704cb0e4a94b5e98cf60f9ad9d0089';

const emotionalSongs = [
  'The Scientist - Coldplay',
  'Someone Like You - Adele',
  'Say You Love Me - Jessie Ware',
  'All of Me - John Legend',
  'Hello - Adele',
  'Fix You - Coldplay',
  'Chasing Cars - Snow Patrol',
  'In the end - Tommee Profit',
  'Stay with Me - Sam Smith',
  'Love on Top - Beyonce',
  'Skinny Love - Bon Iver',
  'A Thousand Years - Christina Perri',
  'When I Was Your Man - Bruno Mars',
  'I Will Always Love You - Whitney Houston',
  'Without You - Mariah Carey',
  'The One That Got Away - Katy Perry',
  'All I Ask - Adele',
  'Let Her Go - Passenger',
  'Un-Break My Heart - Toni Braxton',
  'I Don\'t Want to Miss a Thing - Aerosmith'
];

const App = () => {
  const [query, setQuery] = useState("");
  useEffect(() => {
   
    setQuery(emotionalSongs[Math.floor(Math.random() * emotionalSongs.length)]);
 
    searchTracks();
}, []);

  const [tracks, setTracks] = useState([]);
  const [accessToken, setAccessToken] = useState('');
  const soundRef = useRef(null);

  const getAccessToken = async () => {
    const response = await axios.post('https://accounts.spotify.com/api/token', 
      'grant_type=client_credentials',
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': `Basic ${Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64')}`
        }
      }
    );
    setAccessToken(response.data.access_token);
  }

  const searchTracks = async () => {
    try {
      const response = await axios.get(`https://api.spotify.com/v1/search?type=track&q=${query}`, {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      });
      setTracks(response.data.tracks.items);
    } catch (error) {
      console.log(error);
    }
  };

  const playTrack = async (previewUrl) => {
    try {
      if (soundRef.current) {
        await soundRef.current.unloadAsync();
      }
      soundRef.current = new Audio.Sound();
      await soundRef.current.loadAsync(
        { uri: previewUrl },
        { shouldPlay: false, positionMillis: 0 },
        false,
        false,
        true,
        { progressUpdateIntervalMillis: 1000 }
      );
      soundRef.current.setOnPlaybackStatusUpdate((playbackStatus) => {
        console.log("durationMillis:", playbackStatus.durationMillis);
        console.log("positionMillis:", playbackStatus.positionMillis);
        if (playbackStatus.isLoaded && !playbackStatus.isPlaying) {
          soundRef.current.playAsync();
        }
      });
    } catch (error) {
      console.log('failed to load the sound', error);
    }
  }

  useEffect(() => {
    getAccessToken();
    setQuery(emotionalSongs[Math.floor(Math.random() * emotionalSongs.length)]);
 
    searchTracks();
}, []);

useEffect(() => {
  if(query){
    searchTracks();

  }
}, [query]);

const renderTrack = ({ item }) => {
return (
<TouchableOpacity style={styles.trackContainer} onPress={() => playTrack(item.preview_url)}>
<Text style={styles.trackName}>{item.name}</Text>
<Text style={styles.artistName}>{item.artists.map(artist => artist.name).join(', ')}</Text>
</TouchableOpacity>
);
};

return (
<View style={[styles.container, { position: 'relative', top: 1 }]}>
  <Text  style={styles.button}>
    <Ionicons name="ios-arrow-back" size={30} color="white" />
    </Text>

<Text style={styles.header}>Music</Text>
<View style={styles.searchContainer}>
<TouchableOpacity style={styles.searchIcon} >
  <Feather name="search" size={24} color="black" />
 </TouchableOpacity>
<TextInput style={styles.input} placeholder="Search for a song" value={query} onChangeText={setQuery} />

</View>

<FlatList
data={tracks}
renderItem={renderTrack}
keyExtractor={item => item.id}
/>
</View>
);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'flex-start', // align items to left
    justifyContent: 'flex-start', // align container to top
    paddingTop: 50,
    paddingBottom: 20,
    paddingLeft: 10,
    backgroundColor: "lightgray"
  },
header: {
fontSize: 24,
fontWeight: 'bold',
marginVertical: 10,
marginRight: 300,
color: "white",
},
searchContainer: {
  flexDirection: 'row',
  alignItems: 'center',
  marginVertical: 10,
  width: 370,
  borderWidth: 1,
  borderColor: 'gray',
  borderRadius: 15,
  paddingLeft: 5,
  
},
input: {
  flex: 1,
  borderColor: 'gray',
  paddingVertical: 10,
  paddingHorizontal: 10, // add padding to the left to create space for the icon
  marginLeft: 4,
},
Searchbutton: {
backgroundColor: '#1DB954',
borderRadius: 5,
paddingHorizontal: 10,
paddingVertical: 10,
marginLeft: 8,
},
buttonText: {
color: 'white'
},
button: {
  padding: 4,
  marginRight: 350,
  borderRadius: 5,

},
trackContainer: {

  borderColor: 'gray',
  borderRadius: 5,
  paddingVertical: 10,
  paddingHorizontal: 10,
  paddingLeft: 6,
  marginLeft: 4,
  marginVertical: 5,
 width: '100%', // fill the whole width of the screen
},
trackName: {
  fontSize: 16,
  fontWeight: 'bold',
},
artistName: {
  fontSize: 14,
  color: 'gray',
},
searchIcon: {
  marginRight: 10, // add some margin to the right to separate it from the input
  alignItems: 'flex-start', // align to the left
},
});
export default App;
